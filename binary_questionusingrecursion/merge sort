#include <iostream>
 using namespace std;
 
 void merge (int *arr , int s, int e){
     int mid =s+(e-s)/2;
      int len1=mid-s+1;
      int len2 =e-mid ;
      
      
      int * first=new int [ len1];
      int *second=new int [len2];
      
      int mainarrayindex=s;
      for (int i=0 ; i<len1; i++){
           first[ i]= arr[ mainarrayindex++];
      }
       mainarrayindex=mid+1;
      for (int i=0 ; i<len2; i++){
           second[i]=arr[mainarrayindex++];
           
      }
      
      int index1=0;
      int index2=0;
       mainarrayindex = s;
      while(index1<len1 && index2< len2){
          if(first[index1]< second[index2]){
              arr[mainarrayindex++]= first[index1++];
          }
           if(first[index1]> second[index2]){
              arr[mainarrayindex++]= second[index2++];
          }
      }
      
      while(index1< len1){
          arr[mainarrayindex++]=first[index1++];
      }
            while(index2< len2){
          arr[mainarrayindex++]=second[index2++];
      }
      
      // deleting the dyanamic memory is remaining 
 }
 void merge_sort(int *arr, int s , int e ){
     if(s>=e){
          return ;
     }
     int mid =s+(e-s)/2;
     
     // recursively divide the array into the two part 
     merge_sort(arr, s, mid);
     merge_sort(arr, mid+1, e);
     
     // merging the the sorted array 
     merge( arr, s, e);
 }
int main() {
    int arpan [6]={33,5,8,89,12,55};
    merge_sort(arpan, 0, 5);
    for (int i=0; i<6; i++){
        cout<<arpan[i]<< " ";
    } cout<<endl;

    return 0;
}
